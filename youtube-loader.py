__version__ = (1, 1, 0)

# meta developer: @RUIS_VlP, @RoKrz
# requires: yt_dlp

import yt_dlp
import uuid
import os
import re
from .. import loader, utils


def extract_youtube_link(text):
    if not text:
        return None
    match = re.search(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/[^\s]+", text)
    return match.group(0) if match else None


async def download_video(url):
    output_dir = utils.get_base_dir()
    random_uuid = str(uuid.uuid4())
    os.makedirs(output_dir, exist_ok=True)
    ydl_opts = {
        'format': 'best',
        'outtmpl': os.path.join(output_dir, f'{random_uuid}.%(ext)s'),
        'noplaylist': True,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=True)
        video_ext = info_dict.get('ext', None)
        file_path = os.path.join(output_dir, f"{random_uuid}.{video_ext}")
        title = info_dict.get('title', None)

    return file_path, title


def convert_markdown_to_html(template: str, link: str) -> str:
    return re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', template).replace("{link}", link)


@loader.tds
class YouTube_DLDMod(loader.Module):
    """–ü–æ–º–æ–≥–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube"""

    strings = {
        "name": "YouTube-DLD",
        "no_link": "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π.</b>",
        "default_downloading": "üì• <b>–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ.</b>\n\n‚ÑπÔ∏è <code>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ.</code>",
        "default_error": "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n<code>{}</code>",
        "default_response": "üé• –í–æ—Ç [–≤–∞—à–µ –≤–∏–¥–µ–æ]({link})!\n\n<code>{title}</code>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "show_link",
                True,
                "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "downloading_text",
                self.strings["default_downloading"],
                "–¢–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
            ),
            loader.ConfigValue(
                "error_text",
                self.strings["default_error"],
                "–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏. (–∏—Å–ø–æ–ª—å–∑—É–π {} –¥–ª—è –æ—à–∏–±–∫–∏)"
            ),
            loader.ConfigValue(
                "response_text",
                self.strings["default_response"],
                "–û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏. (–∏—Å–ø–æ–ª—å–∑—É–π {link} –¥–ª—è —Å—Å—ã–ª–∫–∏ –∏ {title} –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ)"
            ),
        )

    @loader.command()
    async def dlvideo(self, message):
        """<—Å—Å—ã–ª–∫–∞> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π ‚Äî —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube"""

        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        link = extract_youtube_link(args) if args else None
        if not link and reply:
            link = extract_youtube_link(reply.raw_text)

        if not link:
            await utils.answer(message, self.strings["no_link"])
            return

        await utils.answer(message, self.config["downloading_text"])

        try:
            video, title = await download_video(link)

            if self.config["show_link"]:
                caption_template = self.config["response_text"]
                caption = convert_markdown_to_html(caption_template, link)
                caption = caption.replace("{title}", title or "")
            else:
                caption = title or "–ì–æ—Ç–æ–≤–æ!"

            await utils.answer_file(
                message,
                video,
                caption=caption,
                parse_mode="HTML"
            )

            try:
                await message.delete()
            except:
                pass
            try:
                os.remove(video)
            except:
                pass
        except Exception as e:
            error_msg = self.config["error_text"].format(e)
            await utils.answer(message, error_msg)
            try:
                os.remove(video)
            except:
                pass
