import requests
import json
from urllib.parse import quote
from .. import loader, utils  

# meta developer: @matubuntu
@loader.tds
class CheckModulesMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π"""

    strings = {
        "name": "Check module",
        "answer": (
            "<pre>Found:  ‚ùåÔ∏è {0} |  ‚ö†Ô∏è {1} |  ‚úÖ {2}\n\n"
            "üîç Module check completed:\n\n"
            "‚ùåÔ∏è Criticals ({3}):\n{4}\n\n"
            "‚ö†Ô∏è Warnings ({5}):\n{6}\n\n"
            "üî∞ Advices ({7}):\n{8}</pre>"
        ),
        "error": "Error!\n\n.checkmod <module_link> or reply to a file",
    }

    strings_ru = {
        "answer": (
            "<pre>–ù–∞–π–¥–µ–Ω–æ:  ‚ùåÔ∏è {0} |  ‚ö†Ô∏è {1} |  ‚úÖ {2}\n\n"
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
            "‚ùåÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ ({3}):\n{4}\n\n"
            "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({5}):\n{6}\n\n"
            "üî∞ –°–æ–≤–µ—Ç—ã ({7}):\n{8}</pre>"
        ),
        "error": "–û—à–∏–±–∫–∞!\n\n.checkmod <—Å—Å—ã–ª–∫–∞_–Ω–∞_–º–æ–¥—É–ª—å> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª",
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def send_request(self, url, code=None):
        try:
            if code:
                response = requests.post(url, json={"code": code})
            else:
                response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ
            return json.loads(response.text)
        except Exception as e:
            return {"error": str(e)}

    async def format_response(self, response):
        if "error" in response:
            return f"<b>Error:</b> {response['error']}"

        critical = "\n".join([f"  {item}" for item in response.get("critical_details", [])]) or " ‚ñ™Ô∏è ‚ûñ"
        warn = "\n".join([f"  {item}" for item in response.get("warn_details", [])]) or " ‚ñ™Ô∏è ‚ûñ"
        council = "\n".join([f"  {item}" for item in response.get("council_details", [])]) or " ‚ñ™Ô∏è ‚ûñ"

        return self.strings["answer"].format(
            response.get("critical_count", 0),
            response.get("warn_count", 0),
            response.get("council_count", 0),
            response.get("critical_count", 0),
            critical,
            response.get("warn_count", 0),
            warn,
            response.get("council_count", 0),
            council
        )

    @loader.unrestricted
    @loader.ratelimit
    async def checkmodcmd(self, message):
        """
        <url/reply file> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–¥—É–ª–∏
        """
        args = utils.get_args_raw(message)
        if args:
            url = f"http://ruisblyat.serv00.net/checkmod.php?url={quote(args)}"
            response = await self.send_request(url)
            await utils.answer(message, await self.format_response(response))
            return

        try:
            code_from_message = (await self._client.download_file(message.media, bytes)).decode("utf-8")
        except Exception:
            code_from_message = ""

        try:
            reply = await message.get_reply_message()
            code_from_reply = (await self._client.download_file(reply.media, bytes)).decode("utf-8")
        except Exception:
            code_from_reply = ""

        code = code_from_message or code_from_reply
        if code:
            url = "http://ruisblyat.serv00.net/checkmod.php"
            response = await self.send_request(url, code)
            await utils.answer(message, await self.format_response(response))
        else:
            await utils.answer(message, self.strings["error"])
