version = (1, 0, 0)

# meta developer: @RUIS_VlP

import random
from datetime import timedelta
from telethon import TelegramClient, events
from telethon import functions
from telethon.tl.types import Message
import os
from .. import loader, utils

import paramiko

def upload_file_sftp(host, port, username, password, local_file, remote_file):
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SSHClient
        client = paramiko.SSHClient()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        client.load_system_host_keys()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        client.connect(hostname=host, port=port, username=username, password=password)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º SFTP —Å–µ—Å—Å–∏—é
        sftp = client.open_sftp()
        
        try:
            sftp.listdir("sshmod")
        except IOError:
            sftp.mkdir("sshmod")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        sftp.put(local_file, remote_file)
        
        print(f'–§–∞–π–ª {local_file} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {remote_file}')
        
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º SFTP —Å–µ—Å—Å–∏—é –∏ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if 'sftp' in locals():
            sftp.close()
        client.close()

def execute_ssh_command(host, port, username, password, command):
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SSHClient
        client = paramiko.SSHClient()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        client.load_system_host_keys()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        client.connect(hostname=host, port=port, username=username, password=password)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        stdin, stdout, stderr = client.exec_command(command)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥ –∏ –æ—à–∏–±–∫–∏
        output = stdout.read().decode()
        error = stderr.read().decode()
        exit_code = stdout.channel.recv_exit_status()
        
        return exit_code, output, error
        
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        return None, None, str(e)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        client.close()

@loader.tds
class SSHMod(loader.Module):
    """SSH module for uploading files and executing commands"""

    strings = {
        "name": "SSHMod",
        "cfg_host": "IP address or domain",
        "cfg_username": "SSH username",
        "cfg_password": "SSH password",
        "cfg_port": "SSH port",
        "save_description": "<reply> - saves the file to the ~/sshmod directory",
        "save_uploading": "<b>Starting upload....</b>",
        "save_success": "<b>File uploaded to SSH server, file location:</b> <code>~/sshmod/{}</code>",
        "save_no_file": "<b>No files found in the message!</b>",
        "save_reply_required": "<b>The command must be a reply to a message!</b>",
        "sterminal_description": "<command> - executes a command on the SSH server",
        "sterminal_no_command": "<b>No command specified!</b>",
        "sterminal_output": "‚å®Ô∏è<b> System command</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>Exit code:</b> <code>{}</code>\n<b>üìº Output:</b>\n<pre><code class='language-stdout'>{}</code></pre>",
        "sterminal_error": "‚å®Ô∏è<b> System command</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>Exit code:</b> <code>{}</code>\n<b>üö´ Errors:</b>\n<pre><code class='language-stderr'>{}</code></pre>",
        "sterminal_output_and_error": "‚å®Ô∏è<b> System command</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>Exit code:</b> <code>{}</code>\n<b>üìº Output:</b>\n<pre><code class='language-stdout'>{}</code></pre>\n<b>üö´ Errors:</b>\n<pre><code class='language-stderr'>{}</code></pre>",
        "config_not_set": "<b>Values are not set. Set them using the command:</b>\n<code>.config SSHMod</code>",
    }

    strings_ru = {
        "name": "SSHMod",
        "cfg_host": "IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω",
        "cfg_username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH",
        "cfg_password": "–ü–∞—Ä–æ–ª—å SSH",
        "cfg_port": "–ü–æ—Ä—Ç SSH",
        "save_description": "<reply> - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ~/sshmod",
        "save_uploading": "<b>–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É....</b>",
        "save_success": "<b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:</b> <code>~/sshmod/{}</code>",
        "save_no_file": "<b>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã!</b>",
        "save_reply_required": "<b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
        "sterminal_description": "<command> - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ",
        "sterminal_no_command": "<b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!</b>",
        "sterminal_output": "‚å®Ô∏è<b> –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> <code>{}</code>\n<b>üìº –í—ã–≤–æ–¥:</b>\n<pre><code class='language-stdout'>{}</code></pre>",
        "sterminal_error": "‚å®Ô∏è<b> –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> <code>{}</code>\n<b>üö´ –û—à–∏–±–∫–∏:</b>\n<pre><code class='language-stderr'>{}</code></pre>",
        "sterminal_output_and_error": "‚å®Ô∏è<b> –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n<pre><code class='language-bash'>{}</code></pre>\n<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> <code>{}</code>\n<b>üìº –í—ã–≤–æ–¥:</b>\n<pre><code class='language-stdout'>{}</code></pre>\n<b>üö´ –û—à–∏–±–∫–∏:</b>\n<pre><code class='language-stderr'>{}</code></pre>",
        "config_not_set": "<b>–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É:</b>\n<code>.config SSHMod</code>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "host",
                "None",
                lambda: self.strings["cfg_host"],
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "username",
                "None",
                lambda: self.strings["cfg_username"],
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "password",
                "None",
                lambda: self.strings["cfg_password"],
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "Port",
                22,
                lambda: self.strings["cfg_port"],
                validator=loader.validators.String(),
            ),
        )

    @loader.command(alias="save")
    async def save(self, message):
        """<reply> - saves the file to the ~/sshmod directory"""
        host = self.config["host"] or "None"
        username = self.config["username"] or "None"
        password = self.config["password"] or "None"
        port = self.config["Port"] or "None"
        if host == "None" or username == "None" or password == "None" or port == "None":
            await utils.answer(message, self.strings["config_not_set"])
            return
        reply = await message.get_reply_message()
        if reply:
            if reply.media:
                await utils.answer(message, self.strings["save_uploading"])
                file_path = await message.client.download_media(reply.media)
                sftp_path = f"sshmod/{os.path.basename(file_path)}"
                upload_file_sftp(host, port, username, password, file_path, sftp_path)
                os.remove(file_path)
                await utils.answer(
                    message,
                    self.strings["save_success"].format(os.path.basename(file_path)),
                )
            else:
                await utils.answer(message, self.strings["save_no_file"])
        else:
            await utils.answer(message, self.strings["save_reply_required"])

    @loader.command(alias="sterminal")
    async def sterminal(self, message):
        """<command> - executes a command on the SSH server"""
        host = self.config["host"] or "None"
        username = self.config["username"] or "None"
        password = self.config["password"] or "None"
        port = self.config["Port"] or "None"
        if host == "None" or username == "None" or password == "None" or port == "None":
            await utils.answer(message, self.strings["config_not_set"])
            return
        command = utils.get_args_raw(message)
        if not command:
            await utils.answer(message, self.strings["sterminal_no_command"])
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ
        exit_code, output, error = execute_ssh_command(host, port, username, password, command)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –≤—ã–≤–æ–¥–∞ –∏ –æ—à–∏–±–æ–∫
        if output and not error:
            response = self.strings["sterminal_output"].format(command, exit_code, output)
        elif error and not output:
            response = self.strings["sterminal_error"].format(command, exit_code, error)
        elif output and error:
            response = self.strings["sterminal_output_and_error"].format(command, exit_code, output, error)
        else:
            response = f"‚å®Ô∏è<b> System command</b>\n<pre><code class='language-bash'>{command}</code></pre>\n<b>Exit code:</b> <code>{exit_code}</code>"

        await utils.answer(message, response)