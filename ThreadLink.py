# meta developer: @RUIS_VlP, @matubuntu

import re
from telethon import TelegramClient, events, sync, utils
from telethon.tl.types import Channel, Chat
from .. import loader, utils
from ..inline.types import (
    BotInlineCall,
    BotInlineMessage,
    BotMessage,
    InlineCall,
    InlineMessage,
    InlineQuery,
    InlineUnit,
)

@loader.tds
class ThreadMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–∫–∏"""

    strings = {"name": "Thread"}

    @loader.command()
    async def threadlink(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, "‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>")
            return
        try:
        	cid = message.chat.id
        except:
        	await utils.answer(message, "‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!</b>")
        	return
        chat = await message.get_chat()
        url = f'https://t.me/{chat.username}' if chat.username else f'https://t.me/c/{chat.id}'
        msg_link = f"{url}/{reply.id}?thread={reply.id}"
        await utils.answer(message, "<b>ü™µ –í–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>", reply_markup={"text": "–ü–µ—Ä–µ–π—Ç–∏", "url": msg_link})