version = (1, 0, 0)

# meta developer: @RUIS_VlP

from telethon import functions, TelegramClient
from telethon.tl.types import Message, ChannelParticipantsKicked, ChatBannedRights
import time
from .. import loader, utils
import typing
from telethon.errors import ChatAdminRequiredError, UserAdminInvalidError
from telethon.tl.functions.contacts import GetBlockedRequest, UnblockRequest

def seq_rights(sequence: str, inv: bool = False) -> typing.Union[dict, None]:
    if not sequence:
        return None

    result = {}

    for right in sequence:
        if right == '0':
            result['view_messages'] = not inv
        elif right == '1':
            result['send_messages'] = not inv
        elif right == '2':
            result['send_media'] = not inv
        elif right == '3':
            result['send_stickers'] = not inv
        elif right == '4':
            result['send_gifs'] = not inv
        elif right == '5':
            result['send_games'] = not inv
        elif right == '6':
            result['send_inline'] = not inv
        elif right == '7':
            result['embed_link_previews'] = not inv
        elif right == '8':
            result['send_polls'] = not inv
        elif right == '9':
            result['change_info'] = not inv
        elif right == 'a':
            result['invite_users'] = not inv
        elif right == 'b':
            result['pin_messages'] = not inv
        else:
            raise ValueError(f'Unknown right: {right}')

    return result

async def unblock_user(message, user_id, i, ids):
    try:
        await message.client(UnblockRequest(id=user_id))
        await utils.answer(message, f"‚ôªÔ∏è <b>–†–∞–∑–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {i + 1}/{int(len(ids))}</b>")
    except Exception as e:
        await utils.answer(message, f"üö´ <b> –û—à–∏–±–∫–∞! </b>\n\n<code>{e}</code>")

@loader.tds
class AmnestyMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ –∏–ª–∏ –≤ –ª—Å (–∞–º–Ω–∏—Å—Ç–∏—è)"""

    strings = {
        "name": "Amnesty",
    }
        
    @loader.command()
    async def amnestycmd(self, message):
        """ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –≤ —á–∞—Ç–µ"""
        try:
        	chat_id = message.chat.id
        except:
        	await utils.answer(message, "üö´ <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!</b>")
        	return
        chat = await message.client.get_participants(chat_id, filter=ChannelParticipantsKicked)
        ids = [user.id for user in chat]
        i = 0
        if len(ids) == 0:
        	await utils.answer(message, "<b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–∞ —É–∂–µ –ø—É—Å—Ç–æ–π!</b>")
        	return
        for id in ids:
        	try:
        		await self.client.edit_permissions(chat_id, id, None, **seq_rights('0'),)
        	except ChatAdminRequiredError:
        		return await utils.answer(message, "üö´ <b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! </b>")
        	except UserAdminInvalidError:
        		return await utils.answer(message, "üö´ <b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! </b>")
        	except Exception as e:
        		return await utils.answer(message, "üö´ <b> –û—à–∏–±–∫–∞! </b>\n\n<code>{e}</code>")
        	await utils.answer(message, f"‚ôªÔ∏è <b>–†–∞–∑–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {i + 1}/{int(len(ids))}</b>")
        	i += 1
        	time.sleep(1)
        await utils.answer(message, f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ! {int(len(ids))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>")
        
    @loader.command()
    async def amnistiacmd(self, message):
        """ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –≤ –ª—Å"""
        chat = await message.client(GetBlockedRequest(offset=0, limit=500))
        i = 0
        ids = [user.id for user in chat.users]
        if len(ids) == 0:
        	await utils.answer(message, "<b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π!</b>")
        	return
        for id in ids:
        	await unblock_user(message, id, i, ids)
        	i += 1
        	time.sleep(1)
        await utils.answer(message, f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ! {int(len(ids))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</b>")
